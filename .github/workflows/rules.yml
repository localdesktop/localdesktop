# Local Desktop Convention:
# - Direct pushes to main are forbidden.
# - Pull requests to main must change Cargo.toml version.
# - A new tag with that version is automatically released on merge.
name: Local Desktop Convention

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  check-version-bump:
    name: Check Version Bump
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code with history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract base version from Cargo.toml
        id: base_version
        run: |
          BASE_VERSION=$(git show origin/main:Cargo.toml | grep -E '^version\s*=' | head -n1 | sed -E 's/^version\s*=\s*"([^"]+)".*/\1/')
          if [ -z "$BASE_VERSION" ]; then
            echo "Error: Could not extract base version"
            exit 1
          fi
          echo "version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "Base version extracted: $BASE_VERSION"

      - name: Extract head version from Cargo.toml
        id: head_version
        run: |
          HEAD_VERSION=$(grep -E '^version\s*=' Cargo.toml | head -n1 | sed -E 's/^version\s*=\s*"([^"]+)".*/\1/')
          if [ -z "$HEAD_VERSION" ]; then
            echo "Error: Could not extract head version"
            exit 1
          fi
          echo "version=$HEAD_VERSION" >> $GITHUB_OUTPUT
          echo "Head version extracted: $HEAD_VERSION"

      - name: Check if version was bumped
        run: |
          BASE="${{ steps.base_version.outputs.version }}"
          HEAD="${{ steps.head_version.outputs.version }}"
          echo "Base version: $BASE"
          echo "Head version: $HEAD"
          if [ "$BASE" = "$HEAD" ] || [ "$(printf '%s\n' "$BASE" "$HEAD" | sort -V | tail -n1)" != "$HEAD" ]; then
            echo "As a convention, all pull requests to main MUST change the version in Cargo.toml."
            echo "Error: New version ($HEAD) MUST be > base version ($BASE)."
            exit 1
          fi

  create-tag:
    name: Create Tag
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | head -n1 | sed -E 's/version = "(.*)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        env:
          TAG: v${{ steps.get_version.outputs.version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping."
            exit 0
          fi

          git tag "$TAG"
          git push origin "$TAG"

      - name: Trigger build workflow
        env:
          TAG: v${{ steps.get_version.outputs.version }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run build.yml --ref $TAG
